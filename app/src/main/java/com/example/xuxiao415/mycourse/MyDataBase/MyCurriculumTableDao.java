package com.example.xuxiao415.mycourse.MyDataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_CURRICULUM_TABLE".
*/
public class MyCurriculumTableDao extends AbstractDao<MyCurriculumTable, Long> {

    public static final String TABLENAME = "MY_CURRICULUM_TABLE";

    /**
     * Properties of entity MyCurriculumTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property C_id = new Property(1, int.class, "c_id", false, "c_id");
        public final static Property StudentNumber = new Property(2, String.class, "studentNumber", false, "studentNumber");
        public final static Property ClassNumber = new Property(3, String.class, "classNumber", false, "classNumber");
        public final static Property CNumber = new Property(4, String.class, "cNumber", false, "cNumber");
        public final static Property CName = new Property(5, String.class, "cName", false, "cName");
        public final static Property CType = new Property(6, String.class, "cType", false, "cType");
        public final static Property TName = new Property(7, String.class, "tName", false, "tName");
        public final static Property Period = new Property(8, String.class, "period", false, "period");
        public final static Property CTime = new Property(9, String.class, "cTime", false, "cTime");
        public final static Property Weekday = new Property(10, String.class, "weekday", false, "weekday");
        public final static Property Location = new Property(11, String.class, "location", false, "location");
    }


    public MyCurriculumTableDao(DaoConfig config) {
        super(config);
    }
    
    public MyCurriculumTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_CURRICULUM_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"c_id\" INTEGER NOT NULL ," + // 1: c_id
                "\"studentNumber\" TEXT," + // 2: studentNumber
                "\"classNumber\" TEXT," + // 3: classNumber
                "\"cNumber\" TEXT," + // 4: cNumber
                "\"cName\" TEXT," + // 5: cName
                "\"cType\" TEXT," + // 6: cType
                "\"tName\" TEXT," + // 7: tName
                "\"period\" TEXT," + // 8: period
                "\"cTime\" TEXT," + // 9: cTime
                "\"weekday\" TEXT," + // 10: weekday
                "\"location\" TEXT);"); // 11: location
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_CURRICULUM_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyCurriculumTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getC_id());
 
        String studentNumber = entity.getStudentNumber();
        if (studentNumber != null) {
            stmt.bindString(3, studentNumber);
        }
 
        String classNumber = entity.getClassNumber();
        if (classNumber != null) {
            stmt.bindString(4, classNumber);
        }
 
        String cNumber = entity.getCNumber();
        if (cNumber != null) {
            stmt.bindString(5, cNumber);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(6, cName);
        }
 
        String cType = entity.getCType();
        if (cType != null) {
            stmt.bindString(7, cType);
        }
 
        String tName = entity.getTName();
        if (tName != null) {
            stmt.bindString(8, tName);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(9, period);
        }
 
        String cTime = entity.getCTime();
        if (cTime != null) {
            stmt.bindString(10, cTime);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(11, weekday);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(12, location);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyCurriculumTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getC_id());
 
        String studentNumber = entity.getStudentNumber();
        if (studentNumber != null) {
            stmt.bindString(3, studentNumber);
        }
 
        String classNumber = entity.getClassNumber();
        if (classNumber != null) {
            stmt.bindString(4, classNumber);
        }
 
        String cNumber = entity.getCNumber();
        if (cNumber != null) {
            stmt.bindString(5, cNumber);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(6, cName);
        }
 
        String cType = entity.getCType();
        if (cType != null) {
            stmt.bindString(7, cType);
        }
 
        String tName = entity.getTName();
        if (tName != null) {
            stmt.bindString(8, tName);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(9, period);
        }
 
        String cTime = entity.getCTime();
        if (cTime != null) {
            stmt.bindString(10, cTime);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(11, weekday);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(12, location);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyCurriculumTable readEntity(Cursor cursor, int offset) {
        MyCurriculumTable entity = new MyCurriculumTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // c_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // studentNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // classNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // period
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // weekday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // location
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyCurriculumTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setC_id(cursor.getInt(offset + 1));
        entity.setStudentNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPeriod(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeekday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyCurriculumTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyCurriculumTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyCurriculumTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
